Project Structure
App Component: The main component that holds the state and renders other components.
ToDoForm Component: A form component to add new to-dos.
ToDoList Component: A component to display the list of to-dos.
ToDoItem Component: A component for individual to-do items.
Features to Include
Adding a To-Do: Use forms and event handling.
Displaying To-Dos: Use props to pass data between components.
Toggling To-Do Completion: Use state and conditional rendering.
Deleting a To-Do: Demonstrate how to update state by removing items.
Implementation
Here's how you can implement this:

1. App Component
jsx
Copy code
import React, { useState } from 'react';
import ToDoForm from './ToDoForm';
import ToDoList from './ToDoList';

const App = () => {
  const [toDos, setToDos] = useState([]);
  const [currentToDo, setCurrentToDo] = useState(null);

  const addToDo = (text) => {
    const newToDo = {
      id: Date.now(),
      text,
      completed: false,
    };
    setToDos([...toDos, newToDo]);
  };

  const updateToDo = (id, text) => {
    setToDos(toDos.map(todo => 
      todo.id === id ? { ...todo, text } : todo
    ));
    setCurrentToDo(null); // Exit edit mode
  };

  const toggleToDo = (id) => {
    setToDos(toDos.map(todo => 
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  const deleteToDo = (id) => {
    setToDos(toDos.filter(todo => todo.id !== id));
  };

  return (
    <div>
      <h1>To-Do List</h1>
      <ToDoForm addToDo={addToDo} currentToDo={currentToDo} updateToDo={updateToDo} />
      <ToDoList toDos={toDos} toggleToDo={toggleToDo} deleteToDo={deleteToDo} setCurrentToDo={setCurrentToDo} />
    </div>
  );
};

export default App;
2. ToDoForm Component
jsx
Copy code
import React, { useState, useEffect } from 'react';

const ToDoForm = ({ addToDo, currentToDo, updateToDo }) => {
  const [text, setText] = useState('');

  useEffect(() => {
    if (currentToDo) {
      setText(currentToDo.text);
    }
  }, [currentToDo]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (text.trim()) {
      if (currentToDo) {
        updateToDo(currentToDo.id, text);
      } else {
        addToDo(text);
      }
      setText('');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Add a new to-do"
      />
      <button type="submit">{currentToDo ? 'Update' : 'Add'}</button>
    </form>
  );
};

export default ToDoForm;
3. ToDoList Component
jsx
Copy code
import React from 'react';
import ToDoItem from './ToDoItem';

const ToDoList = ({ toDos, toggleToDo, deleteToDo, setCurrentToDo }) => {
  return (
    <ul>
      {toDos.map(todo => (
        <ToDoItem
          key={todo.id}
          todo={todo}
          toggleToDo={toggleToDo}
          deleteToDo={deleteToDo}
          setCurrentToDo={setCurrentToDo}
        />
      ))}
    </ul>
  );
};

export default ToDoList;
4. ToDoItem Component
jsx
Copy code
import React from 'react';

const ToDoItem = ({ todo, toggleToDo, deleteToDo, setCurrentToDo }) => {
  return (
    <li style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>
      <span onClick={() => toggleToDo(todo.id)}>{todo.text}</span>
      <button onClick={() => setCurrentToDo(todo)}>Edit</button>
      <button onClick={() => deleteToDo(todo.id)}>Delete</button>
    </li>
  );
};

export default ToDoItem;
Explanation
App Component: Manages the state of to-dos and the currently edited to-do.
App Component: Manages the state of to-dos and the currently edited to-do.

addToDo: Adds a new to-do.
updateToDo: Updates an existing to-do's text.
toggleToDo: Toggles the completion status of a to-do.
deleteToDo: Deletes a to-do.
setCurrentToDo: Sets the to-do that is being edited.
ToDoForm Component: Handles both adding and editing to-dos.

Uses a state variable text to manage the input field.
Uses useEffect to set the input field to the text of the to-do being edited.
Submits the form either to add a new to-do or update an existing one based on whether currentToDo is set.
ToDoList Component: Renders the list of to-dos.

Passes necessary props to each ToDoItem component, including functions to toggle, delete, and set the current to-do for editing.
ToDoItem Component: Represents an individual to-do item.

Handles toggling completion, deleting the to-do, and setting the to-do for editing.
Additional Improvements
To further refine the application, consider the following improvements:

Styling: Add CSS or use a library like styled-components to improve the visual appearance.
Local Storage: Persist to-dos across page reloads by saving to-dos to local storage.
Error Handling: Add error messages or validations to improve user experience (e.g., prevent adding empty to-dos).
Animations: Use animations to make adding, editing, and deleting to-dos more visually appealing.
Local Storage Example
To add local storage support, update the App component to save and load to-dos:

App Component with Local Storage
jsx
Copy code
import React, { useState, useEffect } from 'react';
import ToDoForm from './ToDoForm';
import ToDoList from './ToDoList';

const App = () => {
  const [toDos, setToDos] = useState([]);
  const [currentToDo, setCurrentToDo] = useState(null);

  useEffect(() => {
    const savedToDos = JSON.parse(localStorage.getItem('toDos')) || [];
    setToDos(savedToDos);
  }, []);

  useEffect(() => {
    localStorage.setItem('toDos', JSON.stringify(toDos));
  }, [toDos]);

  const addToDo = (text) => {
    const newToDo = {
      id: Date.now(),
      text,
      completed: false,
    };
    setToDos([...toDos, newToDo]);
  };

  const updateToDo = (id, text) => {
    setToDos(toDos.map(todo => 
      todo.id === id ? { ...todo, text } : todo
    ));
    setCurrentToDo(null);
  };

  const toggleToDo = (id) => {
    setToDos(toDos.map(todo => 
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    ));
  };

  const deleteToDo = (id) => {
    setToDos(toDos.filter(todo => todo.id !== id));
  };

  return (
    <div>
      <h1>To-Do List</h1>
      <ToDoForm addToDo={addToDo} currentToDo={currentToDo} updateToDo={updateToDo} />
      <ToDoList toDos={toDos} toggleToDo={toggleToDo} deleteToDo={deleteToDo} setCurrentToDo={setCurrentToDo} />
    </div>
  );
};

export default App;
Summary
This enhanced To-Do List application now covers:

Adding To-Dos: Demonstrates form handling and state updates.
Editing To-Dos: Allows updating existing to-dos.
Toggling Completion: Uses conditional rendering to strike through completed tasks.
Deleting To-Dos: Removes items from the list.
Local Storage: Persists to-dos between sessions.
These features ensure that your application covers all basic React concepts and provides a solid foundation for more advanced projects.